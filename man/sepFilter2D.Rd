% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filters.R
\name{sepFilter2D}
\alias{sepFilter2D}
\title{Image Filtering with a Separable Linear Filter}
\usage{
sepFilter2D(image, kernel_x, kernel_y, target = "new", in_place = NULL)
}
\arguments{
\item{image}{An \code{\link{Image}} object.}

\item{kernel_x}{A vector representing the kernel along the x axis.}

\item{kernel_y}{A vector representing the kernel along the y axis.}

\item{target}{The location where the results should be stored. It can take 3
values:
\itemize{
 \item{"new":}{a new \code{\link{Image}} object is created and the results
  are stored inside (the default).}
 \item{"self":}{the results are stored back into \code{image} (faster but
  destructive).}
 \item{An \code{\link{Image}} object:}{the results are stored in another
  existing \code{\link{Image}} object. This is fast and will not replace the
  content of \code{image} but will replace that of \code{target}. Note that
  if \code{target} does not have the same dimensions, number of channels, and
  bit depth as \code{image}, an error may be thrown.}
}}

\item{in_place}{Deprecated. Use \code{target} instead.}
}
\value{
If \code{target="new"}, the function returns an \code{\link{Image}}
 object. If \code{target="self"}, the function returns nothing and modifies
 \code{image} in place. If \code{target} is an \code{\link{Image}} object,
 the function returns nothing and modifies that \code{\link{Image}} object in
 place.
}
\description{
\code{sepFilter2D} applies a separable linear filter to an image.
 First, every row of the image is filtered with the 1D kernel \code{kernel_x}.
 Then, every column of the result is filtered with the 1D kernel \code{kernel_y}.
}
\note{
For color images, the same kernel is applied to each channel of the
 image. If you want to apply different kernels to each channel, first split
 the image into separate channels with the \code{\link{split}} and process
 them individually before merging them using the \code{\link{merge}} function.
}
\examples{
balloon <- image(system.file("sample_img/balloon1.png", package = "Rvision"))
k_edge_detection_x <- c(1, 2, 1)
k_edge_detection_y <- c(1, 0, -1)
balloon_edge <- sepFilter2D(balloon, k_edge_detection_x, k_edge_detection_y)

}
\seealso{
\code{\link{Image}}, \code{\link{filter2D}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
