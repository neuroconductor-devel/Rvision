% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ImageClass.R
\name{cloneImage}
\alias{cloneImage}
\title{Make a copy of an Image object}
\usage{
cloneImage(x, target = "new")
}
\arguments{
\item{x}{An \code{\link{Image}} object.}

\item{target}{The location where the results should be stored. It can take 2
values:
\itemize{
 \item{"new":}{a new \code{\link{Image}} object is created and the results
  are stored inside (the default).}
 \item{An \code{\link{Image}} object:}{the results are stored in another
  existing \code{\link{Image}} object. This is fast and will not replace the
  content of \code{image} but will replace that of \code{target}. Note that
  if \code{target} does not have the same dimensions, number of channels,
  and bit depth as \code{image}, an error may be thrown.}
}}
}
\value{
An \code{\link{Image}} object.
}
\description{
\code{\link{Image}} objects are pointers toward C++ objects
 stored in memory. When copying an \code{\link{Image}} object using an
 assignment operator, this creates a copy of the pointer, but not a copy of
 the C++ object. Any operation on the copied \code{\link{Image}} object will
 therefore result in a modification of the orginal \code{\link{Image}} object.
 This function duplicates the original \code{\link{Image}} object instead,
 allowing safe operations on it while maintaining the integrity of the
 original \code{\link{Image}} object.
}
\examples{
balloon <- image(system.file("sample_img/balloon1.png", package = "Rvision"))
balloon_clone <- cloneImage(balloon)

}
\seealso{
\code{\link{Image}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
