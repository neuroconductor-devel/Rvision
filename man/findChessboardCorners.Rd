% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calib3d.R
\name{findChessboardCorners}
\alias{findChessboardCorners}
\title{Find Calibration Chessboard in Image}
\usage{
findChessboardCorners(
  image,
  pprow,
  ppcol,
  adaptive_threshold = TRUE,
  normalize = TRUE,
  filter_quads = FALSE,
  fast_check = TRUE
)
}
\arguments{
\item{image}{An 8-bit (8U) \code{\link{Image}} object.}

\item{pprow, ppcol}{The number of internal corners per row and column of the
chessboard.}

\item{adaptive_threshold}{A logical indicating whether to use adaptive
thresholding (the default) to convert the image to black and white, rather
than a fixed threshold level (computed from the average image brightness).}

\item{normalize}{A logical indicating whether to normalize (the default) the
image gamma with \code{\link{histEq}} before applying fixed or adaptive
thresholding.}

\item{filter_quads}{A logical indicating whether to use additional criteria
(like contour area, perimeter, square-like shape) to filter out false quads
extracted at the contour retrieval stage (default: FALSE).}

\item{fast_check}{logical indicating whether to run a fast check on the
image that looks for chessboard corners, and shortcut the call if none is
found. This can drastically speed up the call in the degenerate condition
when no chessboard is observed.}
}
\value{
A \code{(pprow * ppcol)}x\code{2} matrix. If the matrix is empty then
 no chessboard with the indicated dimensions is detected.
}
\description{
\code{findChessboardCorners} finds the positions of the internal
 corners of a calibration chessboard.
}
\note{
You can find a suitable chessboard pattern at
 \url{https://github.com/opencv/opencv/blob/4.x/doc/pattern.png}
}
\examples{
checkerboard <- image(system.file("sample_img/checkerboard6x9.png", package = "Rvision"))
pts <- findChessboardCorners(checkerboard, 6, 9)

}
\seealso{
\code{\link{cornerSubPix}}, \code{\link{calibrateCamera}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
