% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform.R
\name{warpPerspective}
\alias{warpPerspective}
\title{Perspective Transformation}
\usage{
warpPerspective(
  image,
  warp_matrix,
  interp_mode = "linear",
  inverse_map = TRUE,
  border_type = "constant",
  border_color = "black",
  target = "new",
  output_size = dim(image)[1:2]
)
}
\arguments{
\item{image}{An \code{\link{Image}} object.}

\item{warp_matrix}{A 3x3 numeric matrix.}

\item{interp_mode}{A character string indicating the interpolation method to
be used. It can be
any of the following:
\itemize{
 \item{"nearest":}{nearest neighbor interpolation.}
 \item{"linear" (the default):}{bilinear interpolation.}
 \item{"cubic":}{bicubic interpolation.}
 \item{"area":}{resampling using pixel area relation. It may be a preferred
  method for image decimation, as it gives moir√©-free results, but when the
  image is zoomed, it is similar to the nearest neighbor method.}
 \item{"lanczos4":}{Lanczos interpolation over 8x8 neighborhood.}
 \item{"linear_exact":}{bit exact bilinear interpolation.}
}}

\item{inverse_map}{A logical. TRUE if \code{warp_matrix} represents an inverse
transformation. If FALSE, \code{warp_matrix} will be inverted.}

\item{border_type}{A character string indicating the extrapolation method to
use when filling empty pixels created during the transformation. It can be
any of the following:
\itemize{
 \item{"constant" (the default):}{\code{iiiiii|abcdefgh|iiiiii} with \code{i}
  specified by \code{border_value}.}
 \item{"replicate":}{\code{aaaaaa|abcdefgh|hhhhhh}.}
 \item{"reflect":}{\code{fedcba|abcdefgh|hgfedc}.}
 \item{"wrap":}{\code{cdefgh|abcdefgh|abcdef}.}
 \item{"reflect_101":}{\code{gfedcb|abcdefgh|gfedcb}.}
 \item{"transparent":}{\code{uvwxyz|abcdefgh|ijklmn}.}
}}

\item{border_color}{A value or vector of any kind of R color specification
compatible with \code{\link{col2bgr}} representing the color of the border
(default: "black").}

\item{target}{The location where the results should be stored. It can take 3
values:
\itemize{
 \item{"new":}{a new \code{\link{Image}} object is created and the results
  are stored inside (the default).}
 \item{"self":}{the results are stored back into \code{image} (faster but
  destructive).}
 \item{An \code{\link{Image}} object:}{the results are stored in another
  existing \code{\link{Image}} object. This is fast and will not replace the
  content of \code{image} but will replace that of \code{target}. Note that
  \code{target} must have the same bit depth and number of channels as
  \code{image} but can have different dimensions.}
}}

\item{output_size}{If \code{target="new"}, a 2-elements vector indicating the
number of rows and columns of the output image (defaults to the dimensions
of \code{image}).}
}
\value{
If \code{target="new"}, the function returns an \code{\link{Image}}
 object. If \code{target="self"}, the function returns nothing and modifies
 \code{image} in place. If \code{target} is an \code{\link{Image}} object,
 the function returns nothing and modifies that \code{\link{Image}} object in
 place.
}
\description{
\code{warpPerspective} applies a perspective transformation to
 an image.
}
\examples{
file1 <- system.file("sample_img/balloon1.png", package = "Rvision")
file2 <- system.file("sample_img/balloon2.png", package = "Rvision")
balloon1 <- changeColorSpace(image(file1), "GRAY")
balloon2 <- changeColorSpace(image(file2), "GRAY")
ecc <- findTransformORB(balloon1, balloon2, warp_mode = "homography")
balloon2_transformed <- warpPerspective(balloon2, ecc)

}
\seealso{
\code{\link{warpPerspective}}, \code{\link{findTransformECC}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
